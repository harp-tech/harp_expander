using Bonsai.Expressions;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using System.Reactive.Linq;

namespace Bonsai.Harp.Expander
{
    [WorkflowElementCategory(ElementCategory.Condition)]
    [Description("Returns the sequence of encoder data generated by the magnetic encoder expansion.")]
    public class MagneticEncoder : SingleArgumentExpressionBuilder
    {
        [Description("Specifies whether to include the Harp timestamp in the result.")]
        public bool IncludeTimestamp { get; set; }

        public override Expression Build(IEnumerable<Expression> arguments)
        {
            var expression = arguments.First();
            var methodName = IncludeTimestamp ? nameof(GetTimestampedMagneticEncoder) : nameof(GetMagneticEncoder);
            return Expression.Call(typeof(MagneticEncoder), methodName, null, expression);
        }

        static MagneticEncoderDataFrame GetEncoderDataFrame(ushort[] payload)
        {
            MagneticEncoderDataFrame result;
            result.Angle = payload[0];
            result.Intensity = payload[1];
            return result;
        }

        static IObservable<MagneticEncoderDataFrame> GetMagneticEncoder(IObservable<HarpMessage> source)
        {
            return source.Where(OutputExpander.Registers.MagEncoderRead, MessageType.Event)
                         .Select(message => GetEncoderDataFrame(message.GetPayloadArray<ushort>()));
        }

        static IObservable<Timestamped<MagneticEncoderDataFrame>> GetTimestampedMagneticEncoder(IObservable<HarpMessage> source)
        {
            return source.Where(OutputExpander.Registers.MagEncoderRead, MessageType.Event).Select(message =>
            {
                var payload = message.GetTimestampedPayloadArray<ushort>();
                return Timestamped.Create(GetEncoderDataFrame(payload.Value), payload.Seconds);
            });
        }
    }

    public struct MagneticEncoderDataFrame
    {
        public ushort Angle;
        public ushort Intensity;
    }
}
